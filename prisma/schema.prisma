// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum FieldType {
    TEXT
    NUMBER
    DATE
    TIME
    DATETIME
    EMAIL
    URL
    PASSWORD
    FILE
    IMAGE
    SELECT
    CHECKBOX
    RADIO
    TEXTAREA
    COLOR
    RANGE
    HIDDEN
    SEARCH
    MONTH
    WEEK
    TIMELOCAL
    DATETIMELOCAL
}

enum Role {
    USER
    ADMIN
}

model Form {
    id          String   @id @default(uuid())
    userId      String
    name        String
    description String 
    published   Boolean  @default(false)
    fields      Field[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    visits      Int @default(0)
    submissions Int @default(0)

    shareURL    String @unique @default(uuid())
}

model Field {
    id          Int       @id @default(autoincrement())
    type        FieldType
    name        String
    label       String?
    value       String?
    fieldId     String
    placeholder String?
    pattern     String?
    min         Int?
    max         Int?
    fileType    String?
    required    Boolean   @default(false)
    form        Form      @relation(fields: [formId], references: [id])
    formId      String
    Option      Option[]
}

model Option {
    id      Int     @id @default(autoincrement())
    value   String
    label   String?
    field   Field   @relation(fields: [fieldId], references: [id])
    fieldId Int
}

// model User {
//     id        String   @id @default(uuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     email     String   @unique
//     name      String?
//     password  String
//     role      Role     @default(USER)
// }

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
