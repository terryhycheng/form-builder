generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Form {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  name        String
  published   Boolean  @default(false)
  shareURL    String   @unique @default(uuid())
  submissions Int      @default(0)
  userId      String
  visits      Int      @default(0)
  fields      Field[]
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Form_userId_fkey")
}

model Field {
  id          String    @id @default(uuid())
  type        FieldType
  name        String
  label       String?
  value       String?
  fieldId     String
  placeholder String?
  pattern     String?
  min         Int?
  max         Int?
  fileType    String?
  required    Boolean   @default(false)
  formId      String
  order       Int
  form        Form      @relation(fields: [formId], references: [id])
  option      Option[]

  @@index([formId], map: "Field_formId_fkey")
}

model Option {
  id      Int     @id @default(autoincrement())
  value   String
  label   String?
  fieldId String
  field   Field   @relation(fields: [fieldId], references: [id])

  @@index([fieldId], map: "Option_fieldId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  forms         Form[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  TIME
  DATETIME
  EMAIL
  URL
  PASSWORD
  FILE
  IMAGE
  SELECT
  CHECKBOX
  RADIO
  TEXTAREA
  COLOR
  RANGE
  HIDDEN
  SEARCH
  MONTH
  WEEK
  TIMELOCAL
  DATETIMELOCAL
}

enum Role {
  USER
  ADMIN
}
